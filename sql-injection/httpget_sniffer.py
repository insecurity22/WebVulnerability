# from scapy.all import *
# from scapy.layers.inet import * # = pycharm
import pcap # pypcap
import sys
import re
import threading
#from main import values as m
# url, action_page, id_value, pw_value, domain, middle, next_url, topost, sqlinjection_mysql


def getInterface():

    ifs = pcap.findalldevs()

    # No interfaces available, abort.
    if len(ifs) == 0:
        print "You don't have enough permissions to open any interface on this system."
        sys.exit(1)

    # Only one interface available, use it.
    elif len(ifs) == 1:
        print "Only one interface present, defaulting to it."
        return ifs[0]

    # have to update
    # Ask the user to choose an interface from the list.
    count = 0
    for iface in ifs:
        print '%i - %s' % (count, iface)
        count += 1
    idx = int(raw_input('Please select an interface: '))
    return ifs[idx]

    # but
    #ifs = ifs[0]
    #return ifs


def sniffer(ifs, count, firstgetpacket):

    # Packet capture
    # cap = pcap.open_live(ifs)

    sniffer = pcap.pcap(name=ifs, promisc=True, immediate=True, timeout_ms=50)
    sniffer.setfilter('tcp and port 80')  # HTTP

    p = re.compile("GET ([a-zA-z0-9\/\.\_\?\=\&])* HTTP")
    # addr = lambda pkt, offset: ' '.join(str(ord(pkt[i])) for i in range(offset, offset + 4))
    for ts, pkt in sniffer: # When a packet comes in ... start...

        # packet check : print('%s\t' % str(pkt))
        # print(bool(result))

        result = p.search(str(pkt))
        if bool(result) is True:
            getpacket = 1
            if firstgetpacket == 0:
                # first get packet is request packet for get post packet
                firstgetpacket += 1
                print('Send request get packet\n %s\t' % str(pkt))
                continue

            print('%s\t' % str(pkt))
            print("Login is success : " + str(getpacket) + "\n(This computer is \"risk\")")
            return getpacket

        else:
            getpacket = 0
            print('%s\t' % str(pkt))
            print("Login is failed : " + str(getpacket)
                  + "\n" + str(count) + "\n") # safe

        count += 1
        if count > 17:
            print("Total packet : " + str(count) + " (This computer is \"safe\")")
            return getpacket


class MyThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.daemon = True
        self.count = 0
        self.firstgetpacket = 0 # send request get packet

    def run(self):
        ifs = getInterface()
        print("\n[[[[[ PACKET CHECK ]]]]]\nDEV : %s\n" % str(ifs))
        while True:
            sniffer(ifs, self.count, self.firstgetpacket)
            break

t = MyThread()
t.run()
